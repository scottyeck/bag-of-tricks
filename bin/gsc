#!/bin/bash

# constants
feat="feat"
docs="docs"
chore="chore"
fix="fix"
refactor="refactor"
style="style"
test="test"

COMMAND_TYPES=(feat docs chore fix refactor style test localize)
SKIP_FLAGS=("--skip" "-s")
HELP_FLAGS=("--help" "-h")

# Check if an array contains an entry.
# https://stackoverflow.com/a/8574392/2423549
getContainsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1;
}

usage () {
  echo "usage: gsc [type] [-sh] 'commit messsage'"
  echo "  args:"
  echo "    type   type of commit"
  echo "             options:"
  for type in ${COMMAND_TYPES[@]}; do
  echo "               * $type"
  done
  echo "  options:"
  echo "    -s     skip ci"
  echo "    -h     show usage"
}

gsc () {

  # TODO: Check if args contain ' OR " properly

  # Lop commit message off of last line and isolate remaining lines
  # for further inspection.
  arglines=$(printf '%s\n' "$@")
  message=$(echo "$arglines" | tail -n 1)
  length=$(echo "$arglines" | wc -l)
  restlines="$arglines"
  if (( $length > 1 )); then
    restlines=$(echo "$arglines" | head -n $(($length -1)))
  fi

  command_type=""
  has_command_type=false
  help=false
  skip=false

  # Determine which commands / flags are present.
  for token in $restlines; do
    if getContainsElement "$token" "${COMMAND_TYPES[@]}"; then
      # Can only have one command, so throw if another is found.
      if $has_command_type ; then
        echo "gsc: Error - Detected multiple commands specified"
        echo "Run 'gsc --help' for proper usage."
        exit 1
      fi
      has_command_type=true
      command_type=$token
    elif getContainsElement "$token" "${SKIP_FLAGS[@]}"; then
      skip=true
    elif getContainsElement "$token" "${HELP_FLAGS[@]}"; then
      help=true
    fi
  done

  if $help ; then
    usage
    exit 0
  fi

  # Format command with optional skip prefix.
  final_message="$command_type: $message"
  if $skip ; then
    final_message="[ci skip] $final_message"
  fi

  command="git commit -m '$final_message'"
  eval $command
}

gsc "$@"