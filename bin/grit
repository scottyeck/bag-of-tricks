#!/bin/bash

# Examples
# grit push -c
# grit push -c -r upstream
# grit checkout -f [query]

# Constants
push="push"
checkout="checkout"
merge="merge"

getBranch () {
  local branch=""
  local OPTIND opt
  while getopts ":cf:" opt; do
    case $opt in
      "c")
        branch="$(git branch | grep \*)"
        ;;
      "f")
        branch="$(git branch | grep $OPTARG)"
        ;;
    esac
  done
  echo "$branch"
}

cleanBranch () {
  local branch=$1
  echo "$branch" | sed 's/\*//' | awk '{print $1}'
}

getRemote () {
  local remote=""
  local OPTIND opt
  while getopts ":r:" opt; do
    case $opt in
      "r")
        remote=$OPTARG
        ;;
      esac
  done
  if [ -z $remote ] ; then
    remote="origin"
  fi
  echo "$remote"
}

getIsPreview () {
  local preview=0
  local OPTIND opt
  while getopts ":p" opt; do
    case $opt in
      "p")
        preview=1
        ;;
    esac
  done
  echo $preview
}

getPushCmd () {
  local remote=$1
  local branch=$2
  echo "git push $remote $branch"

  # TODO
  # Allow for force-push (Prompt for input first)
}

getCheckoutCmd () {
  local branch=$1
  echo "git checkout $branch"
}

getMergeCmd () {
  local branch=$1
  echo "git merge $branch"
}

grit () {
  local type=$1
  shift

  local cmd=""
  local isPreview="$(getIsPreview $@)"
  local branch="$(getBranch $@)"
  local remote="$(getRemote $@)"

  local branchLen=$(echo "$branch" | wc -l)

  if [ "$branchLen" -gt "1" ]; then
    echo "grit - Vague query. Your query returned the following branches:"
    echo "$branch"
    echo "Please try again with a more specific query."
    exit 1
  elif [ -z "$branch" ]; then
    echo "grit - Unsuccessful query. Your query returned no branches."
    echo "Please try again with a more accurate query."
    exit 1
  fi

  branch="$(cleanBranch "$branch")"

  if [ $type = $push ] ; then
    cmd="$(getPushCmd $remote $branch)"
  elif [ $type = $checkout ] ; then
    cmd="$(getCheckoutCmd $branch)"
  elif [ $type = $merge ] ; then
    cmd="$(getMergeCmd $branch)"
  else
    echo "grit - Unrecognized command."
    exit 1
  fi

  if [ "$isPreview" -eq "1" ] ; then
    echo "grit - Command preview..."
    echo "$cmd"
  else
    echo "grit - Executing command..."
    echo "$cmd"
    eval $cmd
  fi
}

grit "$@"
