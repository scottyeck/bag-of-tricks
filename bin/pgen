#!/bin/bash

# Constants

add="add"
remove="remove"
list="list"
install="install"
sync="sync"
prune="prune"

# Paths

bundle="$HOME/.vim/bundle"
rc="$HOME/.pathogenrc"

# Helpers

tab="  "

# Utils

getPluginName () {
    local url=$1
    name="${url##*/}"
    name="${name%.git}"
    echo $name
}

getInstalledPluginUrl () {
    local name=$1

    # Last entry here removes a non-standard space char from a git-config by literally
    # copy+pasting it. Apparently this is what sed likes. :shrug:
    # @see https://stackoverflow.com/a/7558627
    local url=$(cat $bundle/$name/.git/config | grep 'url' | sed 's/url =//' | sed 's/ //g' | sed 's/	//g')
    echo $url
}

getCurrentSha () {
    local name=$1
    echo "$( cd $bundle/$name && git rev-parse HEAD )"
}

# Commands

sync () {
    local result="{"$'\n'
    local name=""
    local index=-1
    local bundle_list=$( ls $bundle )
    local length=$( echo "$bundle_list" | wc -l )

    for name in $bundle_list ; do

        local url=$( getInstalledPluginUrl $name )
        local sha=$( getCurrentSha $name )
        local entry=$tab"\"${name}\": {"$'\n'

        index=$((index + 1))
        
        entry=$entry$tab$tab"\"url\": \"$url\","$'\n'
        entry=$entry$tab$tab"\"revision\": \"$sha\""$'\n'
        entry=$entry$tab"}"

        if ! [[ $index = $(( length - 1)) ]] ; then
            entry=$entry","
        fi
        entry=$entry$'\n'
        result=$result$entry
    done
    result=$result"}"
    echo "${result}" > $rc
}

add () {
    local repo=$1
    local name=$( getPluginName $repo )

    # Ensure our target dir exists
    mkdir -p $bundle

    local sha=""
    if ! [ -z "$2" ] ; then
        sha=$2
    fi

    if [[ -e $bundle/$name ]] ; then
        # TODO: Ensure plugin is installed at coorect sha
        echo "Plugin '$name' is already installed"
    else
        cd $bundle
        git clone $repo || exit 1
        if ! [[ $sha = "" ]] ; then
            cd $bundle/$name
            git reset --hard $sha || exit 1
        fi
        sync
        echo "Successfully added plugin '$name'"
    fi
}

remove () {
    local name=$1
    if [[ -e $bundle/$name ]] ; then
        rm -rf $bundle/$name
        sync
        echo "Successfully removed plugin '$name'"
    else
        echo "Plugin '$name' not found. Run 'pgen list' to view installed plugins"
    fi
}

list () {
    ls $bundle
}

install () {
    local index=-1

    rc_content="$( cat $rc )"
    IFS=$'\n' lines=( $rc_content )

    # TODO: Replace this garbage with use of jq
    for line in ${lines[@]} ; do
        index=$((index + 1))
        line=$( echo $line | sed 's/ //g' )
        if [[ "$line" =~ ^\".+\{$ ]] ; then
            url=$( echo "${lines[$index + 1]}" | awk '{print $2}' | sed 's/\"//g' | sed 's/,//g' )
            sha=$( echo "${lines[$index + 2]}" | awk '{print $2}' | sed 's/\"//g' | sed 's/,//g' )
            add $url $sha
        fi
    done
}

prune () {
    local name=""
    for name in $( ls $bundle ) ; do
        local url=$( getInstalledPluginUrl $name )
        if ! grep -Fxq $url $rc ; then
            remove $name
        fi
    done
}

# Entry

pgen () {
    local cmd=$1
    if [ $cmd = $add ] ; then
        add "$2" "$3"
    elif [ $cmd = $remove ] ; then
        remove "$2"
    elif [ $cmd = $list ] ; then
        list
    elif [ $cmd = $install ] ; then
        install
    elif [ $cmd = $sync ] ; then
        sync
    elif [ $cmd = $prune ] ; then
        prune
    else
        echo "No command $1"
        exit 1
    fi
}

pgen "$@"

